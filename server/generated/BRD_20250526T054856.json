{
  "title": "TS-0526 Shoppers Stop ::  - this is to update the biometric data for them for payroll and performance purpose Integration BRD",
  "detailsTable": {
    "Client": "Shoppers Stop",
    "Vendor": "",
    "Version": "1.0",
    "Doc Owner": "Raghu Vardhan",
    "Functional Lead": "Prabhu Pathak",
    "Status": "DRAFT",
    "Last updated by": "Raghu Vardhan",
    "Last date updated": "2025-05-25",
    "Client Approved By [Name, Designation]": "Sandip Pingle, Architect",
    "Client Approved Date": "2025-05-25",
    "Mode of Integration": "API-Based [API-BASED / STANDARD / CUSTOM DEV]",
    "Modules": "Attendance",
    "Direction": "INBOUND [INBOUND / OUTBOUND / BI-DIRECTION]",
    "Frequency": "Monthly, Last Thursday, 6pm",
    "Data Load": "Incremental",
    "Client email for error/success response": "raghu.vardhan@darwinbox.io"
  },
  "sections": {
    "Purpose/Justification": {
      "type": "text",
      "content": "*   This document outlines the business requirements defined by Shoppers Stop and technical details associated with the Biometric integration using API approach defined by the Darwinbox Integrations team to have an updated integration in place between Darwinbox and Shoppers Stop.\n*   The purpose of this integration is to update employee biometric attendance data in Darwinbox for accurate payroll processing and performance management."
    },
    "Integration Description and Overview": {
      "type": "text",
      "content": "*   This is a push-based integration.\n*   Shoppers Stop will consume Darwinbox APIs to push employee biometric data.\n*   The scope is limited to 10,000 employees, with a maximum of 100,000 attendance punches pushed daily.\n*   This integration focuses on the Attendance module.\n*   Data flows INBOUND to Darwinbox.\n**API-Based Approach:**\n*   Shoppers Stop will utilize Darwinbox's APIs to transmit biometric data.\n*   This involves Shoppers Stop acting as the client, making API calls to Darwinbox."
    },
    "Technical Design Specifications": {
      "type": "text",
      "content": "Technical Design Specifications\n\n**Integration Type:** API-Based Inbound (Push)\n\n**1. Architecture and Approach:**\n\n*   Shoppers Stop will push attendance punches to Darwinbox via a REST API.\n*   The integration will utilize a push-based, near real-time approach.\n*   Shoppers Stop will be responsible for initiating the API calls to Darwinbox.\n*   Darwinbox will expose a dedicated API endpoint for receiving attendance data.\n*   The integration will be designed to handle a maximum of 100,000 attendance punches per day.\n*   API calls will be stateless.\n\n**2. API Endpoint Details (Darwinbox):**\n\n*   **Endpoint URL:** `https://{{subdomain}}.darwinbox.in/api/v1/attendance/punch` (Example - subject to change)\n*   **HTTP Method:** POST\n*   **Request Body Format:** JSON\n*   **Content Type:** `application/json`\n\n**3. Authentication and Authorization:**\n\n*   API requests from Shoppers Stop must be authenticated.\n*   Authentication will be performed using API Key-based authentication.\n*   Shoppers Stop will be provided with a unique API Key.\n*   The API Key must be included in the `Authorization` header of each request.\n    *   Header: `Authorization: ApiKey <API_KEY>`\n\n**4. Request Payload Structure (JSON):**\n\n*   The JSON payload will contain the necessary information for each attendance punch.\n*   The payload structure will be defined in a separate API contract document.\n*   Mandatory fields will be clearly identified in the API contract.\n\n**5. Response Handling (Darwinbox):**\n\n*   Darwinbox API will return a JSON response for each request.\n*   The response will include a status code and a message.\n*   **Successful Response (200 OK):**\n    \n*   **Error Response (400/500):**\n    \n\n**6. Error Handling and Logging:**\n\n*   Shoppers Stop must implement robust error handling to manage API failures.\n*   Retry mechanisms should be implemented for transient errors (e.g., network issues).\n*   A configurable retry policy (number of retries, delay between retries) will be defined.\n*   Detailed logging should be implemented on both Shoppers Stop and Darwinbox sides.\n*   Logs should include request/response payloads, timestamps, and error messages.\n*   Error alerts and notifications will be configured for critical failures.\n\n**7. Security Considerations:**\n\n*   API Key should be securely stored and managed by Shoppers Stop.\n*   API communication should be encrypted using HTTPS.\n*   Darwinbox will implement rate limiting to prevent abuse and ensure API availability.\n*   Input validation will be performed on the Darwinbox side to prevent injection attacks.\n*   Regular security audits will be conducted.\n\n**8. Integration Patterns:**\n\n*   **Synchronous (Request/Response):** Shoppers Stop sends a request and waits for a response from Darwinbox before proceeding.\n*   **Idempotency:** The API should be designed to handle duplicate requests gracefully. Shoppers Stop will implement logic to generate unique IDs for each punch, and Darwinbox will use these IDs to prevent duplicate entries.\n\n**9. API Versioning:**\n\n*   The API will be versioned to allow for future enhancements and changes without breaking existing integrations.\n*   The API version will be included in the API endpoint URL (e.g., `/api/v2/attendance/punch`).\n\n**10. Monitoring and Alerting:**\n\n*   API performance will be monitored on both Shoppers Stop and Darwinbox sides.\n*   Key metrics such as response time, error rate, and request volume will be tracked.\n*   Alerts will be configured for performance degradation and critical errors.\n\n**11. Scalability and Performance:**\n\n*   The integration will be designed to handle the expected volume of attendance punches (up to 100,000 per day).\n*   Darwinbox API will be optimized for performance and scalability.\n*   Load testing will be performed to ensure the integration can handle peak loads.\n\n**12. Data Transformation:**\n\n*   Shoppers Stop will be responsible for transforming the attendance data into the format expected by the Darwinbox API.\n*   Data validation will be performed by both Shoppers Stop and Darwinbox.\n\n**13. Throttling:**\n*   Darwinbox will implement a throttling mechanism to protect the API from abuse and ensure fair usage. The initial limit will be 10 requests per second per API Key. This limit can be adjusted based on performance and usage patterns. Shoppers Stop will be notified of any changes to the throttling limits."
    },
    "Data Mapping Table": {
      "type": "text",
      "content": ""
    },
    "Assumptions": {
      "type": "text",
      "content": "**Assumptions**\n\n*   Shoppers Stop will provide accurate and complete employee biometric data.\n\n*   Shoppers Stop will ensure the data format aligns with Darwinbox API specifications.\n\n*   Employee IDs provided by Shoppers Stop will exist in Darwinbox.\n\n*   Shoppers Stop will handle data mapping and transformation.\n\n*   Darwinbox API uptime will be consistent and reliable.\n\n*   Shoppers Stop will adhere to Darwinbox API rate limits.\n\n*   Shoppers Stop will provide necessary authentication credentials.\n\n*   Shoppers Stop will notify Darwinbox of any changes to their data structure.\n\n*   Shoppers Stop will handle error logging and retry mechanisms on their end.\n\n*   The integration will be tested thoroughly by both Shoppers Stop and Darwinbox."
    },
    "Dependencies": {
      "type": "text",
      "content": "**Dependencies**\n*   Shoppers Stop must provide a complete list of employee codes to be integrated.\n*   Darwinbox HCM module (Attendance policy, attendance shift, Clock-in Priority and weekly off) must be fully configured as per the configuration workbook.\n*   Shoppers Stop must provide the API endpoint details for pushing attendance punches.\n*   API Access and Authentication:\n    *   Shoppers Stop requires API credentials (API key, client ID, and client secret) for accessing Darwinbox APIs.\n    *   IP whitelisting might be required for Shoppers Stop's server IP addresses.\n*   Data Validation Requirements:"
    },
    "APIs Used": {
      "type": "text",
      "content": ""
    },
    "Test Cases": {
      "type": "text",
      "content": "Test Cases\n\n*   **Objective:** Validate the successful integration of Shoppers Stop's attendance data into Darwinbox via API.\n\n*   **General Test Case Guidelines:**\n\n    *   All test cases must be executed in a test environment mirroring the production environment.\n    *   Each test case should document the expected result and the actual result.\n    *   Any discrepancies between expected and actual results must be documented as defects.\n\n*   **Test Case 1: Successful Attendance Punch Ingestion**\n\n    *   **Description:** Verify that attendance punches are successfully ingested into Darwinbox from Shoppers Stop.\n    *   **Steps:**\n        1.  Shoppers Stop pushes an attendance punch (IN) for an employee to the Darwinbox API.\n        2.  Verify the API response is successful (HTTP 200 OK).\n        3.  Verify the attendance record is created in Darwinbox with the correct:\n            *   Employee ID\n            *   Punch Time (IN)\n            *   Location (if applicable)\n            *   Device ID (if applicable)\n    *   **Expected Result:** Attendance record created in Darwinbox accurately reflecting the Shoppers Stop punch data.\n\n*   **Test Case 2: Successful Attendance Punch Out Ingestion**\n\n    *   **Description:** Verify that attendance punches are successfully ingested into Darwinbox from Shoppers Stop.\n    *   **Steps:**\n        1.  Shoppers Stop pushes an attendance punch (OUT) for an employee to the Darwinbox API.\n        2.  Verify the API response is successful (HTTP 200 OK).\n        3.  Verify the attendance record is created in Darwinbox with the correct:\n            *   Employee ID\n            *   Punch Time (OUT)\n            *   Location (if applicable)\n            *   Device ID (if applicable)\n    *   **Expected Result:** Attendance record created in Darwinbox accurately reflecting the Shoppers Stop punch data.\n\n*   **Test Case 3: Invalid Employee ID**\n\n    *   **Description:** Verify the system handles invalid employee IDs gracefully.\n    *   **Steps:**\n        1.  Shoppers Stop pushes an attendance punch with an invalid Employee ID to the Darwinbox API.\n        2.  Verify the API returns an appropriate error code (e.g., HTTP 400 Bad Request) and error message.\n        3.  Verify that no attendance record is created in Darwinbox.\n    *   **Expected Result:** API returns an error, and no attendance record is created.\n\n*   **Test Case 4: Duplicate Attendance Punch**\n\n    *   **Description:** Verify the system handles duplicate attendance punches.\n    *   **Steps:**\n        1.  Shoppers Stop pushes an attendance punch to the Darwinbox API.\n        2.  Shoppers Stop pushes the *same* attendance punch again to the Darwinbox API.\n        3.  Verify that the API returns an appropriate response (either success with no new record created, or an error indicating a duplicate).\n        4.  Verify that only *one* attendance record exists in Darwinbox for that punch.\n    *   **Expected Result:** Only one attendance record exists, and the system handles the duplicate gracefully.\n\n*   **Test Case 5: Missing Required Fields**\n\n    *   **Description:** Verify the system handles missing required fields in the API request.\n    *   **Steps:**\n        1.  Shoppers Stop pushes an attendance punch with a missing required field (e.g., Punch Time) to the Darwinbox API.\n        2.  Verify the API returns an appropriate error code (e.g., HTTP 400 Bad Request) and error message indicating the missing field.\n        3.  Verify that no attendance record is created in Darwinbox.\n    *   **Expected Result:** API returns an error, and no attendance record is created.\n\n*   **Test Case 6: Data Type Validation**\n\n    *   **Description:** Verify data type validation for various fields.\n    *   **Steps:**\n        1.  Shoppers Stop pushes an attendance punch with an invalid data type for a field (e.g., a string for Punch Time).\n        2.  Verify the API returns an appropriate error code (e.g., HTTP 400 Bad Request) and error message.\n        3.  Verify that no attendance record is created in Darwinbox.\n    *   **Expected Result:** API returns an error, and no attendance record is created.\n\n*   **Test Case 7: Volume Testing (100,000 Punches)**\n\n    *   **Description:** Verify the system can handle the expected volume of attendance punches.\n    *   **Steps:**\n        1.  Shoppers Stop pushes 100,000 attendance punches to the Darwinbox API.\n        2.  Monitor API performance (response times, error rates).\n        3.  Verify that all 100,000 attendance records are created in Darwinbox accurately.\n    *   **Expected Result:** All 100,000 records are created successfully within acceptable performance parameters.\n\n*   **Test Case 8: Concurrent Requests**\n\n    *   **Description:** Verify the system can handle concurrent requests from Shoppers Stop.\n    *   **Steps:**\n        1.  Shoppers Stop sends multiple attendance punch requests concurrently to the Darwinbox API.\n        2.  Monitor API performance and error rates.\n        3.  Verify that all attendance records are created in Darwinbox accurately.\n    *   **Expected Result:** All records are created successfully, and the system handles concurrent requests without errors.\n\n*   **Test Case 9: Time Zone Handling**\n\n    *   **Description:** Verify that the system correctly handles time zones.\n    *   **Steps:**\n        1.  Shoppers Stop pushes an attendance punch with a specific time zone to the Darwinbox API.\n        2.  Verify that the attendance record in Darwinbox reflects the correct time after time zone conversion.\n    *   **Expected Result:** Time zone is correctly converted, and the attendance record reflects the accurate time.\n\n*   **Test Case 10: API Authentication**\n\n    *   **Description:** Verify that API authentication is working correctly.\n    *   **Steps:**\n        1.  Shoppers Stop attempts to push an attendance punch to the Darwinbox API without proper authentication credentials.\n        2.  Verify the API returns an appropriate error code (e.g., HTTP 401 Unauthorized).\n        3.  Shoppers Stop attempts to push an attendance punch to the Darwinbox API with valid authentication credentials.\n        4.  Verify the API returns a success code (e.g., HTTP 200 OK).\n    *   **Expected Result:** API rejects unauthorized requests and accepts authorized requests."
    },
    "Data Flow Diagram": {
      "type": "graphviz",
      "code": "digraph inbound_api_integration {\n    rankdir=LR;\n    node [shape=box, style=\"rounded,filled\", fillcolor=\"#f0f0f0\"];\n\n    subgraph cluster_shoppersstop {\n        label = \"Shoppers Stop\";\n        style = \"filled\";\n        fillcolor = \"#e0e0ff\";\n\n        shoppersstop_system [label=\"Shoppers Stop System\", shape=box];\n        authentication_shoppersstop [label=\"Authentication\", shape=cylinder];\n    }\n\n    subgraph cluster_darwinbox {\n        label = \"Darwinbox\";\n        style = \"filled\";\n        fillcolor = \"#ffe0e0\";\n\n        darwinbox_api [label=\"Darwinbox API\\n(Attendance Punches)\", shape=box];\n        darwinbox_database [label=\"Darwinbox Database\", shape=cylinder];\n        authentication_darwinbox [label=\"Authentication\", shape=cylinder];\n    }\n\n    // Edges\n    shoppersstop_system -> authentication_shoppersstop [label=\"Request Token\"];\n    authentication_shoppersstop -> shoppersstop_system [label=\"Token\"];\n    shoppersstop_system -> darwinbox_api [label=\"POST /attendance\\n(Punches)\", style=\"bold\"];\n    darwinbox_api -> authentication_darwinbox [label=\"Validate Token\"];\n    authentication_darwinbox -> darwinbox_api [label=\"OK/Error\"];\n    darwinbox_api -> darwinbox_database [label=\"Store Punches\"];\n    darwinbox_api -> shoppersstop_system [label=\"Response (200 OK)\", style=\"dashed\"];\n\n    // Styling\n    edge [arrowhead=vee];\n}\n",
      "format": "dot"
    }
  },
  "metadata": {
    "generatedAt": "2025-05-26T05:48:56.395Z",
    "totalSections": 9
  }
}